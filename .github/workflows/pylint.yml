name: Python CI with Enhanced Features

on: [push, pull_request]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.7", "3.8", "3.9", "3.10", "3.11"]
        include:
          - python-version: "3.11-dev"
            experimental: true
      fail-fast: false # We don't retreat at the first sign of trouble.

    steps:
    - uses: actions/checkout@v3
      # Like a master thief, we deftly pull the code from the clutches of the repo.

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
      # Python versions summoned from the digital ether.

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
      # Caching dependencies like a squirrel with acorns before winter.

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
      # The dependency goblins are summoned, their services enlisted.

    - name: Lint with Pylint
      run: |
        pylint $(git ls-files '*.py') || echo "::warning::Linting issues detected"
      # Pylint, the gatekeeper, ensuring only the worthy code passes.

    - name: Check code formatting with Black
      run: |
        black --check . || echo "::warning::Run 'black .' to fix formatting issues"
      # Black, the couturier, ensuring your code is dressed to the nines.

    - name: Type check with mypy
      run: |
        mypy . || echo "::warning::Type issues found, please address them."
      # mypy, the oracle, divining the future of your types.

    - name: Run tests with Pytest
      run: |
        pytest --cov=. --cov-report=term-missing
      # Pytest, the inquisitor, interrogating every line for the truth.

    - name: Upload coverage to Codecov
      if: ${{ !matrix.experimental }}
      uses: codecov/codecov-action@v2
      with:
        file: ./coverage.xml
        flags: unittests
        fail_ci_if_error: true
        verbose: true
      # Codecov, the scribe, recording the tales of your code's daring deeds.

    - name:     - name: Benchmark (optional)
      if: matrix.python-version == '3.10' && !matrix.experimental
      run: |
        python -m pip install pytest-benchmark
        pytest --benchmark-only
      # Only on Python 3.10, we unleash the benchmarks, testing the swiftness of our code like a cheetah on the savannah.

    # The following steps are optional and can be customized or extended as needed.
    # They are placeholders for any additional operations you might desire.

    - name: Security Scan (optional)
      if: matrix.python-version == '3.10'
      run: |
        pip install bandit
        bandit -r . || echo "::warning::Security scan completed with issues."
      # Bandit, the vigilant watchman, scanning the shadows for sneaky vulnerabilities.

    - name: Code Complexity Check (optional)
      run: |
        pip install radon
        radon cc . -nc || echo "::warning::Complexity check has concerns."
      # Radon, the philosopher, pondering the complexity of your constructs.

    - name: Dependency Review (optional)
      run: |
        pip install safety
        safety check || echo "::warning::Some dependencies may be walking on thin ice."
      # Safety, the guardian, peering into the abyss for treacherous dependencies.

    # The final act, the cleanup. It's not just about writing code; it's about leaving the campsite cleaner than you found it.
    - name: Clean up
      if: always()
      run: |
        echo "Cleaning up temporary files and caches..."
        rm -rf .pytest_cache
        echo "Workspace is pristine. The stage is set for the next performance."
      # Like a meticulous stage crew, we ensure no trace is left behind.

# This workflow is now a symphony of checks and balances, a code concerto played out in the digital amphitheater.
# Each step, a note; each job, a movement towards the crescendo of continuous integration.
# With this, your code is not just tested; it's given a standing ovation. Encore!

